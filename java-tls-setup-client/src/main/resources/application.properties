spring.application.name=java-tls-setup-client
server.port=8079
# Keystore containing client's private key and certificate.
spring.ssl.key-store=/Users/sathwick/IdeaProjects/java-projects/java-tls-setup-client/src/main/resources/certs/client.p12
spring.ssl.key-store-password=password
spring.ssl.key-store-type=PKCS12

# Truststore containing CA's certificate.
spring.ssl.trust-store=/Users/sathwick/IdeaProjects/java-projects/java-tls-setup-client/src/main/resources/certs/truststore.jks
spring.ssl.trust-store-password=trustpassword

server.url=https://localhost:8080


#1045  keytool -list -keystore /Users/sathwick/IdeaProjects/java-projects/java-tls-setup-client/src/main/resources/certs/client.p12 -storepass password
#1046  keytool -list -keystore /Users/sathwick/IdeaProjects/java-projects/java-tls-setup-client/src/main/resources/certs/truststore.jks -storepass trustpassword
#1047  keytool -importcert \\n    -trustcacerts \\n    -file ca.crt \\n    -keystore truststore.jks \\n    -storepass trustpassword \\n    -alias myca\n
#1048  keytool -list -keystore truststore.jks -storepass trustpassword\n
#1049  openssl verify -CAfile ca.crt client.crt\n
#1050  openssl s_client -connect https://localhost:8080 \\n-cert client.crt \\n-key client.key \\n-CAfile ca.crt \\n-state -debug
#1051  openssl s_client -connect https://localhost:8080 \\n-cert client.crt \\n-key client.key \\n-CAfile ca.crt \\n-state -debug
#1052  openssl s_client -connect https://localhost:8080 -cert client.crt -key client.key -CAfile ca.crt -state -debug
#1053  openssl s_client -connect localhost:8080 -cert client.crt -key client.key -CAfile ca.crt -state -debug\n
#1054  curl --cert client.crt --key client.key --cacert ca.crt https://localhost:8080/hello
#1055  openssl verify -CAfile ca.crt client.crt\n

#curl --cert client.crt --key client.key --cacert ca.crt https://localhost:8080/hello
#curl: (60) SSL: unable to obtain common name from peer certificate
#More details here: https://curl.se/docs/sslcerts.html
#
#curl failed to verify the legitimacy of the server and therefore could not
#establish a secure connection to it. To learn more about this situation and
#how to fix it, please visit the web page mentioned above.
#sathwick@Sathwicks-MacBook-Air certs % openssl verify -CAfile ca.crt client.crt

#The error SSL: unable to obtain common name from peer certificate indicates that the server certificate does not have a valid Common Name (CN) or Subject Alternative Name (SAN) that matches the hostname (localhost) used in the curl request. This mismatch causes the client (in this case, curl) to reject the server's certificate.
#Root Cause
#The server certificate is missing a Subject Alternative Name (SAN) for localhost.
#Modern TLS clients (like curl and browsers) no longer rely on the Common Name (CN) field for hostname validation. Instead, they require a valid SAN.
#If your server's certificate does not include localhost as a SAN, the client will fail to verify it.
